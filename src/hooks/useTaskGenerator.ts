// Task Generator Hook - Phase 3: Background Generation System
// Based on RECURRING_REDESIGN_LOG.md specification

'use client'

import { useState, useCallback, useEffect } from 'react'
import { TaskGeneratorService } from '@/lib/services/task-generator'
import { withErrorHandling } from '@/lib/utils/error-handler'

interface UseTaskGeneratorResult {
  isGenerating: boolean
  lastError: string | null

  // Manual generation trigger
  generateMissingTasks: (forceToday?: boolean) => Promise<void>

  // Auto-generation on mount
  hasAutoGenerated: boolean
}

export function useTaskGenerator(autoGenerate: boolean = true): UseTaskGeneratorResult {
  const [isGenerating, setIsGenerating] = useState(false)
  const [lastError, setLastError] = useState<string | null>(null)
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false)

  const generatorService = new TaskGeneratorService()

  // Manual generation trigger
  const generateMissingTasks = useCallback(async (forceToday?: boolean) => {
    if (isGenerating) return // Prevent concurrent generation

    await withErrorHandling(
      async () => {
        setIsGenerating(true)
        setLastError(null)

        console.log('🔄 タスク生成を開始...')
        await generatorService.generateMissingTasks(forceToday)
        console.log('✅ タスク生成完了')
      },
      'useTaskGenerator.generateMissingTasks',
      setLastError
    )

    setIsGenerating(false)
  }, [isGenerating, generatorService])

  // Auto-generation on component mount
  useEffect(() => {
    if (autoGenerate && !hasAutoGenerated && !isGenerating) {
      generateMissingTasks().then(() => {
        setHasAutoGenerated(true)
      })
    }
  }, [autoGenerate, hasAutoGenerated, isGenerating, generateMissingTasks])

  return {
    isGenerating,
    lastError,
    generateMissingTasks,
    hasAutoGenerated
  }
}